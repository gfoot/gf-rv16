These encodings follow some of the principles of the RISC-V RV32I
encodings, such as keeping register specificiers in the same location,
keeping common immediate bits in the same location across formats,
etc.

RV32I avoids placing s3 in the same bits as d, instead putting
immediate bits there, but I believe it's better for me to have s3 just
share with d.

I also did not preserve a common sign bit for immediates, but perhaps
will revisit that later and see if it would indeed simplify the
decoding if there was one.

Note that as the internal bus is 8-bit, as far as the decoder is
concerned the high immediate bits are equivalent to the low ones -
i.e. i8=i0, i9=i1, etc.  This means that for LUI and AUIPC these bits
should share positions with the low bits in other instructions as far
as possible.

The instructions split fairly neatly into 16 groups selected by the
"x" field, with the groups further divided according to the y,z,w
fields where necessary.

I upgraded the immediate fields for jr and jalr because there was a
spare bit easily available, though I don't think these instruction
benefit much from the extra width.  In fact giving an extra bit to
each of j and jal would probably be more useful, and jr and jalr could
maybe be moved to the group above instead, sharing with mret, ecall,
and *irq.

Having more bits for BEQZ and BNEZ would be valuable, possibly by
reducing the bits for BEQ and BNE to make way for the new
instructions.


Instruction encodings:

  y  y  y  s2 s2 s2   s1 s1 s1   d  d  d    x x x x   	rs2, rs1, rd      	 512  (3, 3, 3)   add/and rd, rs1, rs2
  y  y  y  s2 s2 s2   s1 s1 s1   d  d  d    x x x x   	rs2, rs1, rd      	 512  (3, 3, 3)   or/xor rd, rs1, rs2
  y  y  y  s2 s2 s2   s1 s1 s1   d  d  d    x x x x   	rs2, rs1, rd      	 512  (3, 3, 3)   sll rd, rs1, rs2
  y  y  y  s2 s2 s2   s1 s1 s1   d  d  d    x x x x   	rs2, rs1, rd      	 512  (3, 3, 3)   slt rd, rs1, rs2
  y  y  y  s2 s2 s2   s1 s1 s1   d  d  d    x x x x   	rs2, rs1, rd      	 512  (3, 3, 3)   sltu rd, rs1, rs2
  y  y  y  s2 s2 s2   s1 s1 s1   d  d  d    x x x x   	rs2, rs1, rd      	 512  (3, 3, 3)   sra rd, rs1, rs2
  y  y  y  s2 s2 s2   s1 s1 s1   d  d  d    x x x x   	rs2, rs1, rd      	 512  (3, 3, 3)   srl rd, rs1, rs2
  y  y  y  s2 s2 s2   s1 s1 s1   d  d  d    x x x x   	rs2, rs1, rd      	 512  (3, 3, 3)   sub rd, rs1, rs2
                                                                         
  i0 y  y  i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm4zu, rs1, rd   	1024  (4, 3, 3)   slli rd, rs1, imm4zu
  i0 y  y  i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm4zu, rs1, rd   	1024  (4, 3, 3)   srai rd, rs1, imm4zu
  i0 y  y  i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm4u,  rs1, rd   	1024  (4, 3, 3)   srli rd, rs1, imm4u
  .  y  y  .  .  .    .  .  .    .  .  .    x x x x   	                  	   1  (0, 0, 0)   mret
  .  y  y  .  .  .    .  .  .    .  .  .    x x x x   	                  	   1  (0, 0, 0)   ecall
  .  y  y  .  .  .    .  .  .    .  .  .    x x x x   	                  	   1  (0, 0, 0)   *irq
                                                                         
  i6 i5 i4 i3 i2 i1   z  i7 y    i9 i8 w    x x x x   	imm9e             	 512  (9,)        j imm9e
  i6 i5 i4 i3 i2 i1   z  i7 y    i9 i8 w    x x x x   	imm9e,  ra        	 512  (9,)        jal ra, imm9e
  i6 i5 i4 i3 i2 i1   z  w  y    s3 s3 s3   x x x x   	imm5ez, rs3, ra   	 256  (5, 3)      jalr ra, rs3, imm5ez
  i6 i5 i4 i3 i2 i1   z  w  y    s3 s3 s3   x x x x   	imm5ez, rs3       	 256  (5, 3)      jr rs3, imm5ez
  i6 i5 i4 i3 i2 i1   i0 i7 y    d  d  d    x x x x   	imm8,   rd        	2048  (8, 3)      addi rd, rd, imm8
                                                                         
  iE iD iC iB iA i9   i8 iF y    d  d  d    x x x x   	imm8hz, rd        	2048  (8, 3)      auipc rd, imm8hz
  iE iD iC iB iA i9   i8 iF y    d  d  d    x x x x   	imm8hz, rd        	2048  (8, 3)      lui rd, imm8hz
                                                      	                   
  y  i5 i4 i3 i2 i1   s1 s1 s1   s3 s3 s3   x x x x   	imm5ez, rs1, rs3  	2048  (5, 3, 3)   bge rs1, rs3, imm5ez
  y  i5 i4 i3 i2 i1   s1 s1 s1   s3 s3 s3   x x x x   	imm5ez, rs1, rs3  	2048  (5, 3, 3)   bgeu rs1, rs3, imm5ez
                                                                         
  y  i5 i4 i3 i2 i1   s1 s1 s1   s3 s3 s3   x x x x   	imm5ez, rs1, rs3  	2048  (5, 3, 3)   blt rs1, rs3, imm5ez
  y  i5 i4 i3 i2 i1   s1 s1 s1   s3 s3 s3   x x x x   	imm5ez, rs1, rs3  	2048  (5, 3, 3)   bltu rs1, rs3, imm5ez
                                                                         
  i6 i5 i4 i3 i2 i1   s1 s1 s1   s3 s3 s3   x x x x   	imm6ez, rs1, rs3  	4096  (6, 3, 3)   beq rs1, rs3, imm6ez

  i6 i5 i4 i3 i2 i1   s1 s1 s1   s3 s3 s3   x x x x   	imm6ez, rs1, rs3  	4096  (6, 3, 3)   bne rs1, rs3, imm6ez

  i0 y  i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm5,   rs1, rd   	2048  (5, 3, 3)   addi rd, rs1, imm5
  i0 y  i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm5,   rs1, rd   	2048  (5, 3, 3)   andi rd, rs1, imm5
                                                                         
  i0 y  i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm5,   rs1, rd   	2048  (5, 3, 3)   ori rd, rs1, imm5
  i0 y  i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm5,   rs1, rd   	2048  (5, 3, 3)   xori rd, rs1, imm5
                                                                         
  i0 y  i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm5z,  rs1, rd   	2048  (5, 3, 3)   slti rd, rs1, imm5z
  i0 y  i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm5u,  rs1, rd   	2048  (5, 3, 3)   sltiu rd, rs1, imm5u
                                                                         
  i0 i5 i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm6z,  rs1, rd   	4096  (6, 3, 3)   lb rd, imm6z(rs1)
  i0 i5 i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm6z,  rs1, rd   	4096  (6, 3, 3)   lbu rd, imm6z(rs1)
  i6 i5 i4 i3 i2 i1   s1 s1 s1   d  d  d    x x x x   	imm6ez, rs1, rd   	4096  (6, 3, 3)   lw rd, imm6ez(rs1)
  i0 i5 i4 i3 i2 i1   s1 s1 s1   s3 s3 s3   x x x x   	imm6z,  rs1, rs3  	4096  (6, 3, 3)   sb rs3, imm6z(rs1)
  i6 i5 i4 i3 i2 i1   s1 s1 s1   s3 s3 s3   x x x x   	imm6ez, rs1, rs3  	4096  (6, 3, 3)   sw rs3, imm6ez(rs1)


All immediate types:

	imm4u imm4zu imm5 imm5ez imm5u imm5z imm6ez imm6z imm8 imm8hz imm9e

Immediate types with distinct encodings:

	imm4u              3210
	imm5   5          43210
	imm5u             43210
	imm6z  6         543210
	imm8   7       76543210
	imm5ez 5         54321
	imm6ez 6        654321
	imm9e  9     987654321
	imm8hz         FEDCBA98

                 F E D C B A 9 8 7 6 5 4 3 2 1 0
	imm4u    _ _ _ _ _ _ _ _ _ _ _ _ C B A F
	imm5   D                       D C B A F
	imm5u    _ _ _ _ _ _ _ _ _ _ _ D C B A F
	imm6z  E                     E D C B A F
	imm8   8                 8 F E D C B A 9
	imm5ez E                     E D C B A
	imm6ez F                   F E D C B A
	imm9e  6             6 5 8 F E D C B A
	imm8hz   8 F E D C B A 9




RISC-V's standard encodings try to keep the sign bit in a consistent
place.  In the above encoding it needs to come from one of bits
6,8,D,E or F depending on the active immediate type, as well as being
zero for unsigned types.  Let's explore how things would be if instead
the sign bit was always in position F:


  y  y  y   s2 s2 s2  s1 s1 s1  d  d  d   x x x x  	 512 (3,3,3) 	add/and	rd, rs1, rs2
  y  y  y   s2 s2 s2  s1 s1 s1  d  d  d   x x x x  	 512 (3,3,3) 	or/xor	rd, rs1, rs2
  y  y  y   s2 s2 s2  s1 s1 s1  d  d  d   x x x x  	 512 (3,3,3) 	sll	rd, rs1, rs2
  y  y  y   s2 s2 s2  s1 s1 s1  d  d  d   x x x x  	 512 (3,3,3) 	slt	rd, rs1, rs2
  y  y  y   s2 s2 s2  s1 s1 s1  d  d  d   x x x x  	 512 (3,3,3) 	sltu	rd, rs1, rs2
  y  y  y   s2 s2 s2  s1 s1 s1  d  d  d   x x x x  	 512 (3,3,3) 	sra	rd, rs1, rs2
  y  y  y   s2 s2 s2  s1 s1 s1  d  d  d   x x x x  	 512 (3,3,3) 	srl	rd, rs1, rs2
  y  y  y   s2 s2 s2  s1 s1 s1  d  d  d   x x x x  	 512 (3,3,3) 	sub	rd, rs1, rs2
                                                   
  y  i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	1024 (4,3,3) 	slli	rd, rs1, imm4zu
  y  i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	1024 (4,3,3) 	srai	rd, rs1, imm4zu
  y  i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	1024 (4,3,3) 	srli	rd, rs1, imm4u
  y  .  y   .  .  .   .  .  .   .  .  .   x x x x  	   1           	mret
  y  .  y   .  .  .   .  .  .   .  .  .   x x x x  	   1           	ecall
  y  .  y   .  .  .   .  .  .   .  .  .   x x x x  	   1           	*irq
                                                   
  i9 i5 i4  i3 i2 i1  z  i6 y   i7 i8 w   x x x x  	 512 (9,)      	j	imm9e
  i9 i5 i4  i3 i2 i1  z  i6 y   i7 i8 w   x x x x  	 512 (9,)      	jal	ra, imm9e
  i6 i5 i4  i3 i2 i1  z  w  y   s3 s3 s3  x x x x  	 256 (5,3)    	jalr	ra, rs3, imm5ez
  i6 i5 i4  i3 i2 i1  z  w  y   s3 s3 s3  x x x x  	 256 (5,3)    	jr	rs3, imm5ez
  i7 i5 i4  i3 i2 i1  i0 i6 y   d  d  d   x x x x  	2048 (8,3)    	addi	rd, rd, imm8
                                                   
  iF iD iC  iB iA i9  i8 iE y   d  d  d   x x x x  	2048 (8,3)    	auipc	rd, imm8hz
  iF iD iC  iB iA i9  i8 iE y   d  d  d   x x x x  	2048 (8,3)    	lui	rd, imm8hz
                                                    
  i5 y  i4  i3 i2 i1  s1 s1 s1  s3 s3 s3  x x x x  	2048 (5,3,3) 	bge	rs1, rs3, imm5ez
  i5 y  i4  i3 i2 i1  s1 s1 s1  s3 s3 s3  x x x x  	2048 (5,3,3) 	bgeu	rs1, rs3, imm5ez
                                                   
  i5 y  i4  i3 i2 i1  s1 s1 s1  s3 s3 s3  x x x x  	2048 (5,3,3) 	blt	rs1, rs3, imm5ez
  i5 y  i4  i3 i2 i1  s1 s1 s1  s3 s3 s3  x x x x  	2048 (5,3,3) 	bltu	rs1, rs3, imm5ez
                                                   
  i6 i5 i4  i3 i2 i1  s1 s1 s1  s3 s3 s3  x x x x  	4096 (6,3,3) 	beq	rs1, rs3, imm6ez
           
  i6 i5 i4  i3 i2 i1  s1 s1 s1  s3 s3 s3  x x x x  	4096 (6,3,3) 	bne	rs1, rs3, imm6ez
           
  i4 i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	2048 (5,3,3) 	addi	rd, rs1, imm5
  i4 i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	2048 (5,3,3) 	andi	rd, rs1, imm5
                                                   
  i4 i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	2048 (5,3,3) 	ori	rd, rs1, imm5
  i4 i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	2048 (5,3,3) 	xori	rd, rs1, imm5
                                                   
  i4 i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	2048 (5,3,3) 	slti	rd, rs1, imm5z
  i4 i0 y   i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	2048 (5,3,3) 	sltiu	rd, rs1, imm5u
                                                   
  i5 i0 i4  i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	4096 (6,3,3) 	lb	rd, imm6z(rs1)
  i5 i0 i4  i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	4096 (6,3,3) 	lbu	rd, imm6z(rs1)
  i6 i5 i4  i3 i2 i1  s1 s1 s1  d  d  d   x x x x  	4096 (6,3,3) 	lw	rd, imm6ez(rs1)
  i5 i0 i4  i3 i2 i1  s1 s1 s1  s3 s3 s3  x x x x  	4096 (6,3,3) 	sb	rs3, imm6z(rs1)
  i6 i5 i4  i3 i2 i1  s1 s1 s1  s3 s3 s3  x x x x  	4096 (6,3,3) 	sw	rs3, imm6ez(rs1)


                 F E D C B A 9 8 7 6 5 4 3 2 1 0
	imm4u    _ _ _ _ _ _ _ _ _ _ _ * C B A E
	imm4zu   _ _ _ _ _ _ _ _ _ _ _ _ C B A E
	imm5     F F F F F F F F F F F * C B A E
	imm5u    _ _ _ _ _ _ _ _ _ _ * F C B A E
	imm5z    F F F F F F F F F F F F C B A E
	imm6z    F F F F F F F F F F F D C B A E
	imm5ez   F F F F F F F F F F F D C B A _
	imm6ez   F F F F F F F F F F E D C B A _
	imm8     F F F F F F F F * 8 E D C B A 9
	imm9e    F F F F F F * 5 6 8 E D C B A _
	imm8hz   F 8 E D C B A 9 _ _ _ _ _ _ _ _

'*' means this bit may be forced to 1 if the immediate would otherwise
have zero value; otherwise it would either by zero (for unsigned
immediates) or the sign bit (for signed immediates).

I think this does feel simpler as although there are now more output
bit positions that come from different input bits in different
immediate types, there are fewer options in each case especially for
the sign bit case.

It looks like there are about a dozen different profiles for a byte of
immediate data:

	* 8 E D C B A 9    imm8_L
	6 8 E D C B A _    imm9e_L
	F 8 E D C B A 9    imm8hz_H
	F F E D C B A _    imm6ez_L
	F F F * C B A E    imm5_L
	F F F D C B A E    imm6z_L
	F F F D C B A _    imm5ez_L
	F F F F C B A E    imm5z_L
	F F F F F F * 5    imm9e_H
	_ _ * F C B A E    imm5u_L
	_ _ _ * C B A E    imm4u_L
	_ _ _ _ C B A E    imm4zu_L
	F F F F F F F F    imm5_H imm5ez_H imm5z_H imm6ez_H imm6z_H imm8_H
	_ _ _ _ _ _ _ _    imm4u_H imm4zu_H imm5u_H imm8hz_L

It's a pretty comfortable number of different cases, encodable in four
bits from the instruction decoder, and it fits in a single ATF22V10, with
the four-bit selector choosing the encoding, eight output bits, and 10 
input bits from the encoded instruction, for a total of 22 bits.



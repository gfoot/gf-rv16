Some things to do at some point

ISA design
 * Redo the ISA encoding and pin down immediate widths
 * Encode immediate widths in the microcode
 * Make the microcode simulator check parameters are reasonable
 * Make the assembler output binary, and make the simulator read it
 * Write a thorough instruction set test suite
 * Make sure SLTI works properly, it might require its immediate to be inverted by the encoder

System software
 * Make the code use MMIO instead of ecalls for I/O
	ecalls would be fine if an OS handled them but it'd still need to redirect to MMIO
	The problem right now is the simulator is handling the ecall
 * On-device ebreak/callstack handling
	Again the problem is the simulator is doing all the work, which won't work with hardware

Assembler
 * Should listing files show literal interpretation of encoded instructions, or logical purpose?
	i.e. slli x8,x8,16 or li x8,0?  ori x1,x2,12 or li x1,12?  bne x5,x5,6 or bnez x5,6?
 * Should listing files show branches and jumps with absolute or relative addresses?
	pseudotest.s expects relative addresses
 * Should it use the list of PC-relative instructions, or be more dynamic about that?

Simulator/debugging
 * MMIO support
 * IRQ generation and correct IRQ handler simulation
 * Core dump and offline debugger
 * REPL for simulator (single step, breakpoints, etc)
 * Log memory reads and writes in traces

Hardware design
 * Design and validate the instruction fetch/program counter electronics
 * Try embedding control signals in PLDs
 * Finish ALU design

